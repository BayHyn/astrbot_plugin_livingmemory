"""
WebUI服务器模块
"""

import os
import json
import logging
from quart import Quart, render_template, request, redirect, url_for, session, jsonify
from hypercorn.config import Config
from hypercorn.asyncio import serve
import asyncio
import uuid
from datetime import datetime

from core.handlers.webui_handler import WebUIHandler

logger = logging.getLogger("Astrbot.LivingMemory.WebUIServer")

class WebUIServer:
    """WebUI服务器类"""
    
    def __init__(self, config_manager, db_manager, llm_provider):
        """
        初始化WebUI服务器
        
        Args:
            config_manager: 配置管理器
            db_manager: 数据库管理器
            llm_provider: LLM提供者
        """
        self.config_manager = config_manager
        self.db_manager = db_manager
        self.llm_provider = llm_provider
        self.webui_handler = WebUIHandler(db_manager)
        self.app = None
        self.server = None
        self.task = None
        self.running = False
        
    def _get_config(self):
        """获取WebUI配置"""
        return self.config_manager.get_config().get('webui', {})
    
    def _init_app(self):
        """初始化Quart应用"""
        app = Quart(__name__, 
                   template_folder=os.path.join(os.path.dirname(__file__), 'templates'),
                   static_folder=os.path.join(os.path.dirname(__file__), 'static'))
        app.secret_key = str(uuid.uuid4())
        
        # 配置路由
        self._register_routes(app)
        
        return app
    
    def _register_routes(self, app):
        """注册路由"""
        
        @app.route('/')
        async def index():
            """首页"""
            if not session.get('logged_in'):
                return redirect(url_for('login'))
            return await render_template('index.html')
        
        @app.route('/login', methods=['GET', 'POST'])
        async def login():
            """登录页面"""
            if request.method == 'POST':
                form_data = await request.form
                password = form_data.get('password', '')
                
                config = self._get_config()
                if not config.get('enabled', False):
                    return await render_template('login.html', error='WebUI未启用')
                
                if password == config.get('access_password', ''):
                    session['logged_in'] = True
                    session['login_time'] = datetime.now().isoformat()
                    return redirect(url_for('index'))
                else:
                    return await render_template('login.html', error='密码错误')
            
            return await render_template('login.html')
        
        @app.route('/logout')
        async def logout():
            """退出登录"""
            session.clear()
            return redirect(url_for('login'))
        
        @app.route('/api/memories', methods=['GET'])
        async def get_memories():
            """获取记忆列表"""
            if not session.get('logged_in'):
                return jsonify({'error': '未登录'}), 401
            
            page = int(request.args.get('page', 1))
            items_per_page = int(request.args.get('items_per_page', 20))
            
            config = self._get_config()
            if 'items_per_page' in config:
                items_per_page = min(items_per_page, config['items_per_page'])
            
            try:
                result = self.webui_handler.get_all_memories(page, items_per_page)
                return jsonify(result)
            except Exception as e:
                logger.error(f"获取记忆列表失败: {str(e)}")
                return jsonify({'error': str(e)}), 500
        
        @app.route('/api/memories/<memory_id>', methods=['GET'])
        async def get_memory(memory_id):
            """获取单个记忆详情"""
            if not session.get('logged_in'):
                return jsonify({'error': '未登录'}), 401
            
            try:
                result = self.webui_handler.get_memory_detail(memory_id)
                if result:
                    return jsonify(result)
                else:
                    return jsonify({'error': '记忆不存在'}), 404
            except Exception as e:
                logger.error(f"获取记忆详情失败: {str(e)}")
                return jsonify({'error': str(e)}), 500
        
        @app.route('/api/memories/<memory_id>', methods=['DELETE'])
        async def delete_memory(memory_id):
            """删除单个记忆"""
            if not session.get('logged_in'):
                return jsonify({'error': '未登录'}), 401
            
            try:
                result = self.webui_handler.delete_memory(memory_id)
                return jsonify(result)
            except Exception as e:
                logger.error(f"删除记忆失败: {str(e)}")
                return jsonify({'error': str(e)}), 500
        
        @app.route('/api/memories/batch', methods=['DELETE'])
        async def batch_delete_memories():
            """批量删除记忆"""
            if not session.get('logged_in'):
                return jsonify({'error': '未登录'}), 401
            
            try:
                data = await request.get_json()
                memory_ids = data.get('memory_ids', [])
                
                if not memory_ids:
                    return jsonify({'success': False, 'message': '未提供要删除的记忆ID'})
                
                result = self.webui_handler.batch_delete_memories(memory_ids)
                return jsonify(result)
            except Exception as e:
                logger.error(f"批量删除记忆失败: {str(e)}")
                return jsonify({'error': str(e)}), 500
        
        @app.route('/api/memories/search', methods=['GET'])
        async def search_memories():
            """搜索记忆"""
            if not session.get('logged_in'):
                return jsonify({'error': '未登录'}), 401
            
            query = request.args.get('query', '')
            page = int(request.args.get('page', 1))
            items_per_page = int(request.args.get('items_per_page', 20))
            
            config = self._get_config()
            if 'items_per_page' in config:
                items_per_page = min(items_per_page, config['items_per_page'])
            
            try:
                result = self.webui_handler.search_memories(query, page, items_per_page)
                return jsonify(result)
            except Exception as e:
                logger.error(f"搜索记忆失败: {str(e)}")
                return jsonify({'error': str(e)}), 500
        
        @app.route('/api/statistics', methods=['GET'])
        async def get_statistics():
            """获取记忆统计信息"""
            if not session.get('logged_in'):
                return jsonify({'error': '未登录'}), 401
            
            try:
                result = self.webui_handler.get_memory_statistics()
                return jsonify(result)
            except Exception as e:
                logger.error(f"获取统计信息失败: {str(e)}")
                return jsonify({'error': str(e)}), 500
    
    async def start(self):
        """启动WebUI服务器"""
        config = self._get_config()
        
        if not config.get('enabled', False):
            logger.info("WebUI未启用，跳过启动服务器")
            return
        
        self.app = self._init_app()
        
        # 配置Hypercorn
        hypercorn_config = Config()
        hypercorn_config.bind = [f"{config.get('host', '127.0.0.1')}:{config.get('port', 8080)}"]
        hypercorn_config.use_reloader = False
        
        logger.info(f"启动WebUI服务器: http://{hypercorn_config.bind[0]}")
        
        # 启动服务器
        self.task = asyncio.create_task(serve(self.app, hypercorn_config))
        self.running = True
        
        logger.info("WebUI服务器启动成功")
    
    async def stop(self):
        """停止WebUI服务器"""
        if not self.running:
            return
        
        logger.info("正在停止WebUI服务器...")
        
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        
        self.running = False
        logger.info("WebUI服务器已停止")
    
    def is_running(self):
        """检查服务器是否正在运行"""
        return self.running